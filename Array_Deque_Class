from Deque import Deque

class Array_Deque(Deque):

  def __init__(self):
    # capacity starts at 1; we will grow on demand.
    self.__capacity = 1
    self.__contents = [None] * self.__capacity
    self.front = 0
    self.back = 0
    self.__size = 0
    
  def __str__(self):
    arr = [ ]
    if self.__size == 0:
      return '[ ]'
    else:
      if self.front == 0:
        for i in self.__contents:
          if i is not None:
            arr.append(str(i))
        return "[ " + ", ".join(arr) + " ]"
      else: 
        for i in range(self.front,self.__capacity):
          if self.__contents[i] is not None:
            arr.append(str(self.__contents[i]))
        for i in range(0,self.front):
          if self.__contents[i] is not None:
            arr.append(str(self.__contents[i]))
        return "[ " + ", ".join(arr) + " ]"

  def __len__(self):
    return self.__size

  def __grow(self):
    old_arr = self.__contents
    self.__capacity = self.__capacity * 2
    self.__contents = [None] * (self.__capacity)
    for i in range(0,self.__capacity):
      if i < len(old_arr):
        self.__contents[i] = old_arr[self.front]
        self.front = (self.front+1)%len(self)
      else:
        self.__contents[i] = None
    self.front = 0
    self.back = len(self)-1

  def push_front(self, val):
    if len(self) == self.__capacity:
        self.__grow()
    add_idx = (self.front - 1)%len(self.__contents)
    self.__contents[add_idx] = val
    self.front = add_idx
    self.__size += 1

  def pop_front(self):
    if self.__size == 0:
      return self
    else:
      to_pop = self.__contents[self.front]
      self.__contents[self.front] = None
      self.front = (self.front +1)%((len(self.__contents)))
      self.__size -= 1
      return to_pop  
    
  def peek_front(self):
    return self.__contents[self.front]
    
  def push_back(self, val):
    if len(self) == self.__capacity:
      self.__grow()
    add_idx = (self.back + 1)%len(self.__contents)
    self.__contents[add_idx] = val
    self.back = add_idx
    self.__size += 1
  
  def pop_back(self):
    if self.__size == 0:
      return self
    else:
      to_pop = self.__contents[self.back]
      self.__contents[self.back] = None
      self.back = (self.back -1)%((len(self.__contents)))
      self.__size -= 1
      return to_pop 

  def peek_back(self):
    return self.__contents[self.back]


# No main section is necessary. Unit tests take its place.
#if __name__ == '__main__':
 # l = Array_Deque()
 # l.push_front(3)
 # l.push_front(4)
  #l.push_back(1)
 # l.push_back(2)
  #l.push_front(-1)
 # print(str(l))

